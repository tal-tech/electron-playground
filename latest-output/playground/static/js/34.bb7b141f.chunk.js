(this["webpackJsonpelectron-playground"]=this["webpackJsonpelectron-playground"]||[]).push([[34,112],{1319:function(n,e,t){n.exports=["# \u81ea\u52a8\u66f4\u65b0\n\n\u524d\u9762\u6253\u5305\u6d41\u7a0b\u57fa\u4e8eElectron-Builder\uff0c\u56e0\u6b64\u4ee5\u4e0b\u7684\u66f4\u65b0\u8ba8\u8bba\u4e5f\u662f\u57fa\u4e8e\u5176\u63d0\u4f9b\u7684[electron-updater]()\u3002\n\n## 1 \u5173\u4e8eelectron-updater\n\n### 1.1 \u9002\u7528\u573a\u666f\n\nelectron-updater\u53ea\u9002\u7528\u4e8e\u4ee5\u4e0b\u7c7b\u578b\u7684\u5e94\u7528\u5305\uff1a\n- MacOS: DMG\n- Windows: NSIS\n- Linux: AppImage\n\n### 1.2 \u63d0\u4f9b\u7684API\n\n[\u6587\u6863](https://www.electron.build/auto-update#api)\n\n\n| API\u65b9\u6cd5                                     | \u529f\u80fd                   |\n| ------------------------------------------- | ---------------------- |\n| `checkForUpdates()`                         | \u68c0\u67e5\u66f4\u65b0               |\n| `checkForUpdatesAndNotify()`                | \u68c0\u67e5\u66f4\u65b0\uff0c\u6709\u66f4\u65b0\u5219\u63d0\u793a |\n| `downloadUpdate(cancellationToken)`         | \u4e0b\u8f7d\u66f4\u65b0               |\n| `getFeedURL()`                              | \u83b7\u53d6\u66f4\u65b0\u670d\u52a1\u94fe\u63a5       |\n| `setFeedURL(options)`                       | \u8bbe\u7f6e\u66f4\u65b0\u670d\u52a1\u94fe\u63a5       |\n| `quitAndInstall(isSilent, isForceRunAfter)` | \u9000\u51fa\u5e94\u7528\u5e76\u5b89\u88c5\u66f4\u65b0     |\n\n### 1.3 \u63d0\u4f9b\u7684\u4e8b\u4ef6\n\n[\u6587\u6863](https://www.electron.build/auto-update#events)\n\n| \u4e8b\u4ef6                 | \u89e6\u53d1         |\n| -------------------- | ------------ |\n| error                | \u66f4\u65b0\u9519\u8bef     |\n| checking-for-update  | \u68c0\u67e5\u66f4\u65b0\u4e2d   |\n| update-available     | \u6709\u53ef\u7528\u66f4\u65b0   |\n| update-not-available | \u6ca1\u6709\u53ef\u7528\u66f4\u65b0 |\n| download-progress    | \u4e0b\u8f7d\u66f4\u65b0\u4e2d   |\n| update-downloaded    | \u66f4\u65b0\u4e0b\u8f7d\u5b8c\u6210 |\n\n### 1.4 \u4e00\u4e2a\u7b80\u5355\u7684\u66f4\u65b0\u793a\u4f8b\n\u5728\u4e3b\u8fdb\u7a0b\u76d1\u542c\u68c0\u67e5\u66f4\u65b0\u4e8b\u4ef6\n```ts\nimport { autoUpdater } from 'electron-updater'\nimport { ipcMain } from 'electron'\n\nipcMain.on('CHECK_FOR_UPDATE', function(){\n  autoUpdater.checkForUpdatesAndNotify()\n})\n```\n\n\u5728\u6e32\u67d3\u8fdb\u7a0b\u70b9\u51fb\u6309\u94ae\u53d1\u9001ipc\u4e8b\u4ef6\u68c0\u67e5\u66f4\u65b0(\u4ee5React\u4e3a\u4f8b)\n```tsx\nimport React from 'react';\nimport { ipcRenderer } from 'electron'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <button onClick={ipcRenderer.send('CHECK_FOR_UPDATE')}>\u68c0\u67e5\u66f4\u65b0</button>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n\u6ce8\u610f\u521b\u5efaBrowserWindow\u65f6\u9700\u8981\u8bbe\u7f6ewebPreferences\u5c5e\u6027\n```ts\nconst window = new BrowserWindow({\n  webPreferences: {\n    webSecurity: false,\n    nodeIntegration: true,\n  },\n});\n```\n\n## 2. \u66f4\u65b0\u670d\u52a1\u7684\u8bbe\u8ba1\n\n\u4e0a\u9762\u5be5\u5be5\u51e0\u884c\u4ee3\u7801\u5c31\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u66f4\u65b0\u529f\u80fd\uff0c\u4f46\u662f\u8fd9\u4e2a\u529f\u80fd\u5728\u590d\u6742\u7684\u4e1a\u52a1\u573a\u666f\u4e2d\u5f80\u5f80\u6ca1\u6709\u90a3\u4e48\u9002\u5408\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u8fd9\u91cc\u5f00\u59cb\u6765\u8bbe\u8ba1\u4e00\u4e2a\u8d34\u5408\u5e38\u89c1\u573a\u666f\u7684\u66f4\u65b0\u65b9\u6848\u3002\n\n### 2.1 \u9700\u8981\u5b9e\u73b0\u7684\u529f\u80fd\n\n1. \u67e5\u770b\u66f4\u65b0\u4fe1\u606f\n1. \u7528\u6237\u624b\u52a8\u68c0\u67e5\u66f4\u65b0;\n1. \u5e94\u7528\u542f\u52a8\u65f6\u9759\u9ed8\u68c0\u67e5\u66f4\u65b0;\n1. \u5e94\u7528\u5728\u540e\u53f0\u5b9a\u65f6\u68c0\u67e5\u66f4\u65b0;\n1. \u7528\u6237\u624b\u52a8\u4e0b\u8f7d\u66f4\u65b0;\n1. \u4e0b\u8f7d\u8fdb\u5ea6\u663e\u793a;\n1. \u7528\u6237\u624b\u52a8\u9000\u51fa\u5b89\u88c5\u66f4\u65b0;\n1. \u901a\u8fc7\u7248\u672c\u53f7\u63a7\u5236\u5f3a\u5236\u66f4\u65b0; \n1. \u65e5\u5fd7;\n1. \u5f00\u53d1\u65f6\u8bf7\u6c42\u672c\u5730\u670d\u52a1\u505a\u6d4b\u8bd5;\n\n### 2.2 \u66f4\u65b0\u6d41\u7a0b\n\n\u66f4\u65b0\u8fc7\u7a0b\u7684\u6240\u6709\u72b6\u6001:\n\n| \u72b6\u6001        | \u63cf\u8ff0         |\n| ----------- | ------------ |\n| Idle        | \u7a7a\u95f2         |\n| Checking    | \u68c0\u67e5\u4e2d       |\n| Available   | \u6709\u53ef\u4e0b\u8f7d\u66f4\u65b0 |\n| Downloading | \u4e0b\u8f7d\u4e2d       |\n| Downloaded  | \u4e0b\u8f7d\u5b8c\u6210     |\n\n\u72b6\u6001\u6d41\u7a0b\u5982\u56fe\n\n","![auto update workflow]("+t(470)+")","\n\n### 2.3 \u63a5\u53e3\u8bbe\u8ba1\n\n\u6839\u636e\u4e0a\u8ff0\u529f\u80fd\uff0c\u5bf9\u66f4\u65b0\u670d\u52a1\u505a\u4e00\u4e2a\u521d\u6b65\u7684\u8bbe\u8ba1\n\n```ts\n// app/updater.ts\nimport { autoUpdater, UpdateInfo } from 'electron-updater'\n\ninterface CheckResult{\n  // \u662f\u5426\u6709\u66f4\u65b0\n  available: boolean\n  // \u66f4\u65b0\u5185\u5bb9\n  updateInfo: UpdateInfo\n}\n\ninterface ProgressInfo {\n  total: number\n  delta: number\n  transferred: number\n  percent: number\n  bytesPerSecond: number\n}\n\n// \u4e0b\u8f7d\u8fdb\u5ea6\u56de\u8c03\ntype DownloadProgressCallback = (p: ProgressInfo) => void\n// \u4e0b\u8f7d\u7ed3\u675f\u56de\u8c03\ntype DownloadedCallback = () => void\n\nabstract class AppUpdateService {\n  // \u68c0\u67e5\u66f4\u65b0\n  public abstract checkUpdate(): CheckResult\n  // \u4e0b\u8f7d\u66f4\u65b0\n  public abstract downloadUpdate(params: {onDownloadProgress: DownloadProgressCallback, onDownloaded: DownloadedCallback }): void\n  // \u5e94\u7528\u66f4\u65b0\n  public abstract applyUpdate(): void\n}\n```\n\n\u4f46\u662f\u7531\u4e8eipc\u901a\u4fe1\u7684\u9650\u5236\uff0c\u65e0\u6cd5\u4f20\u9012\u56de\u8c03\u51fd\u6570\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u8fd9\u91cc\u8003\u8651\u5c06\u66f4\u65b0\u670d\u52a1\u7684\u4e1a\u52a1\u529f\u80fd\u5c01\u88c5\u90fd\u79fb\u5230\u6e32\u67d3\u8fdb\u7a0b\uff0c\u4e3b\u8fdb\u7a0b\u53ea\u63d0\u4f9b\u57fa\u672c\u7684\u521d\u59cb\u5316\u670d\u52a1\u548c\u63a5\u53e3\u65b9\u6cd5\u7684\u5c01\u88c5\u3002\n\n`app/updater.ts`\n```ts\nimport { autoUpdater } from \"electron-updater\";\nimport logger from \"electron-log\";\nimport { BrowserWindow, ipcMain, app } from 'electron';\n\nfunction checkUpdate() {\n  return autoUpdater.checkForUpdates();\n}\n\nfunction downloadUpdate() {\n  return autoUpdater.downloadUpdate();\n}\n\nfunction applyUpdate() {\n  return autoUpdater.quitAndInstall();\n}\n\nfunction sendToAllBrowserWindows(channel: string, ...args: unknown[]) {\n  const browserWindows = BrowserWindow.getAllWindows()\n  browserWindows.forEach(bw=>bw.webContents.send(channel, ...args))\n}\n\nfunction init() {\n  // \u65e5\u5fd7\n  logger.transports.file.level = \"info\";\n  autoUpdater.logger = logger;\n\n  // \u7981\u7528\u81ea\u52a8\u4e0b\u8f7d\n  autoUpdater.autoDownload = false;\n  // \u542f\u7528\u9000\u51faapp\u65f6\u81ea\u52a8\u5b89\u88c5\u66f4\u65b0\n  autoUpdater.autoInstallOnAppQuit = true;\n\n  // \u76d1\u542c\u4e8b\u4ef6\u5e76\u53d1\u9001\u5230\u6e32\u67d3\u8fdb\u7a0b\n  const events = [\n    \"error\",\n    \"checking-for-update\",\n    \"update-available\",\n    \"update-not-available\",\n    \"download-progress\",\n    \"update-downloaded\",\n  ]\n  events.forEach((eventName) => autoUpdater.on(eventName, sendToAllBrowserWindows.bind(null, 'APP_UPDATER/STATUS_CHANGE')));\n\n  // \u901a\u8fc7\u63a5\u6536\u6e32\u67d3\u8fdb\u7a0b\u53d1\u9001\u7684ipc\u8c03\u7528\u65b9\u6cd5\n  ipcMain.on('APP_UPDATER/CHECK_UPDATE', checkUpdate)\n  ipcMain.on('APP_UPDATER/DOWNLOAD_UPDATE', downloadUpdate)\n  ipcMain.on('APP_UPDATER/APPLY_UPDATE', applyUpdate)\n}\n\napp.once('will-finish-launching', init)\n\nexport const AppUpdater = {\n  checkUpdate,\n  downloadUpdate,\n  applyUpdate,\n}\n```\n\n\u5728\u6e32\u67d3\u8fdb\u7a0b\uff0c\u6211\u4eec\u9996\u5148\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49hooks\u6765\u5b9e\u73b0\u63a5\u6536\u66f4\u65b0\u72b6\u6001\u53d8\u66f4\u5e76\u901a\u8fc7`createContext`\u6765\u5b9e\u73b0\u7ec4\u4ef6\u72b6\u6001\u5171\u4eab\u3002\n`renderer/src/Hooks/useAppUpdate.js`\n```jsx\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\nimport { ipcRenderer } from \"electron\";\n\nexport function useAppUpdate() {\n  const [status, setStatus] = useState(null);\n  const [updateInfo, setUpdateInfo] = useState(null);\n  const [updateProgressInfo, setUpdateProgressInfo] = useState(null);\n  const [error, setError] = useState(null);\n\n  const checkUpdate = () => ipcRenderer.send('APP_UPDATER/CHECK_UPDATE')\n  const downloadUpdate = () => ipcRenderer.send('APP_UPDATER/DOWNLOAD_UPDATE')\n  const applyUpdate = () => ipcRenderer.send('APP_UPDATER/APPLY_UPDATE')\n\n  useEffect(() => {\n    ipcRenderer.on(\"APP_UPDATER/STATUS_CHANGE\", (event, updateEventName, ...args) => {\n        console.log(`updater#${updateEventName}: `, ...args);\n\n        setStatus(updateEventName);\n\n        switch (updateEventName) {\n          case \"error\":\n            setError(args[0]);\n            break;\n          case \"checking-for-update\":\n            break;\n          case \"update-available\":\n            setUpdateInfo(args[0]);\n            break;\n          case \"update-not-available\":\n            break;\n          case \"download-progress\":\n            setUpdateProgressInfo(args[0]);\n            break;\n          case \"update-downloaded\":\n            setUpdateInfo(args[0]);\n            break;\n\n          default:\n            break;\n        }\n      }\n    );\n  }, []);\n\n  return { \n    status, updateInfo, updateProgressInfo, error, \n    checkUpdate, downloadUpdate, applyUpdate,\n  };\n}\n\nconst UpdaterContext = createContext();\n\nexport const UpdaterProvider = ({ children }) => {\n  const state = useAppUpdate();\n  return <UpdaterContext.Provider value={state}>{children}</UpdaterContext.Provider>;\n};\n\nexport function useUpdaterContext(){\n  const store = useContext(UpdaterContext)\n  return store\n}\n```\n\u65b0\u5efa\u4e00\u4e2aAboutPanel\u7ec4\u4ef6\uff0c\u5728\u7ec4\u4ef6\u4e2d\u663e\u793a\u66f4\u65b0\u4fe1\u606f\u4e0b\u8f7d\u8fdb\u5ea6\uff0c\u5df2\u7ecf\u66f4\u65b0\u6309\u94ae\u7b49\n`renderer/src/Components/AboutPanel/index.jsx`\n```jsx\nimport React, {useMemo} from 'react'\nimport { useUpdaterContext } from '../../Hooks/useAppUpdate'\n\nexport function AboutPanel() {\n  const { \n    status, updateInfo, updateProgressInfo, error, \n    checkUpdate, downloadUpdate, applyUpdate,\n   } = useUpdaterContext()\n\n   const Button = useMemo(()=>{\n    if(status === 'update-available'){\n      return <button onClick={downloadUpdate}>Download Updates</button>\n    }\n    if(status === 'download-progress'){\n      return <button>Downloading...</button>\n    }\n    if(status === 'update-downloaded'){\n      return <button onClick={applyUpdate}>Apply Updates</button>\n    }\n    return <button onClick={checkUpdate}>Check for Updates</button>\n   }, [status])\n\n   const Info = useMemo(()=>{\n     if(status === 'error'){\n       console.log('error',error)\n       return <> \n          <p style={{color: 'lightpink'}}>{error?.name}</p> \n          <p style={{color: 'lightpink'}}>{error?.message}</p> \n          <p style={{color: 'lightpink'}}>{error?.stack}</p> \n        </>\n     }\n     if(status === 'checking-for-update'){\n       return <p>Checking...</p>\n     }\n    if(status ==='update-not-available'){\n      return <p>No Updates Available</p>\n    }\n    if(updateInfo){\n      const {version, releaseName, releaseNotes, releaseDate} = updateInfo\n      return <>\n        <p>version: {version}</p>\n        <p>date: {releaseDate}</p>\n        <p>name: {releaseName}</p>\n        <p>notes: {releaseNotes}</p>\n      </>\n    }\n   }, [status, updateInfo, error])\n\n   return <div>\n      {Info}\n\n      {\n        status === 'download-progress' && Boolean(updateProgressInfo) && \n        <div style={{backgroundColor: 'grey', width: 300, height: 20, margin: '12px auto'}}>\n          <div style={{backgroundColor: 'cornflowerblue', height: 20, width: 300 * updateProgressInfo.percent / 100}}></div>\n        </div>\n      }\n\n      {Button}\n   </div>\n}\n```\n\n\u65b0\u5efa\u4e00\u4e2aUpdateChecker\u7ec4\u4ef6\uff0c\u5728\u8fd9\u4e2a\u7ec4\u4ef6\u4e2d\u505a\u9759\u9ed8\u68c0\u67e5\u3001\u5b9a\u65f6\u68c0\u67e5\u548c\u66f4\u65b0\u63d0\u793a\n`renderer/src/Components/UpdateChecker/index.jsx`\n```jsx\nimport React from 'react'\nimport { useAppUpdate } from '../../Hooks/useAppUpdate'\nimport { useEffect } from 'react'\n\nexport function UpdateChecker(){\n  const {checkUpdate, downloadUpdate, applyUpdate, updateInfo, status, updateProgressInfo} = useAppUpdate()\n\n  useEffect(()=>{\n    let timeout\n    function scheduleCheckUpdate(){\n      if(!['checking-for-update', 'update-available', 'download-progress', 'update-downloaded'].includes(status)){\n        checkUpdate()\n      }\n      timeout = setTimeout(() => {\n        scheduleCheckUpdate()\n      }, 1000 * 60 *60);  \n    }\n    scheduleCheckUpdate()\n\n    return () => clearTimeout(timeout)\n  }, [])\n\n  useEffect(() => {\n    if(status === 'update-available'){\n\t\t  // eslint-disable-next-line no-restricted-globals\n      const result = confirm('Updates available, download instantly?')\n      if(result){\n        downloadUpdate()\n      }\n    }\n    if(status === 'update-downloaded'){\n\t\t  // eslint-disable-next-line no-restricted-globals\n      const result = confirm('Download completed, apply updates?')\n      if(result){\n        applyUpdate()\n      }\n    }\n  }, [status])\n\n  return null\n}\n```\n\n\u4e00\u4e2a\u57fa\u672c\u7684\u81ea\u52a8\u66f4\u65b0\u670d\u52a1\u5c31\u5b8c\u6210\u4e86\n"].join("")},470:function(n,e,t){n.exports=t.p+"static/media/auto_update_workflow.97df57db.png"}}]);